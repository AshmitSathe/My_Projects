import base64
import re
import hashlib
from cryptography.fernet import Fernet, InvalidToken

def check_password_strength(password: str):
    if not password:
        return "No password entered."
    score = 0
    rules = [
        (len(password) >= 8, "â‰¥8 chars"),
        (re.search(r"[a-z]", password), "lowercase"),
        (re.search(r"[A-Z]", password), "uppercase"),
        (re.search(r"[0-9]", password), "digit"),
        (re.search(r"[^A-Za-z0-9]", password), "symbol"),
    ]
    for ok, _ in rules:
        if ok: score += 1
    labels = {1:"Very Weak",2:"Weak",3:"Fair",4:"Strong",5:"Very Strong"}
    missing = [label for ok,label in rules if not ok]
    message = f"Password strength: {labels.get(score, 'Very Weak')}"
    if missing:
        message += " (add " + ", ".join(missing) + ")"
    return message

def _derive_key(passphrase: str) -> bytes:
    if not passphrase:
        raise ValueError("Passphrase is required.")
    
    digest = hashlib.sha256(passphrase.encode()).digest()
    return base64.urlsafe_b64encode(digest)

def encrypt_text(plaintext: str, passphrase: str) -> str:
    key = _derive_key(passphrase)
    f = Fernet(key)
    token = f.encrypt(plaintext.encode("utf-8"))
    return token.decode("utf-8")

def decrypt_text(ciphertext: str, passphrase: str) -> str:
    key = _derive_key(passphrase)
    f = Fernet(key)
    try:
        pt = f.decrypt(ciphertext.encode("utf-8"))
        return pt.decode("utf-8")
    except InvalidToken:
        raise ValueError("Invalid token or wrong passphrase.")
