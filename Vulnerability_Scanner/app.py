import os
import json
import datetime
from flask import Flask, render_template, request, send_from_directory, url_for, redirect, flash
from scanner.scan import scan_ports
from scanner.app_scan import scan_application
from tools.password_tools import check_password_strength, encrypt_text, decrypt_text
from tools.sniffer import sniff_packets

app = Flask(__name__)
app.secret_key = "change-me"
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
REPORT_DIR = os.path.join(BASE_DIR, "reports")
os.makedirs(REPORT_DIR, exist_ok=True)


def timestamp():
    return datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

def save_report(prefix: str, data: dict):
    """Save dict to reports/ as .json and .txt; return filenames."""
    ts = timestamp()
    base = f"{prefix}_{ts}"
    json_path = os.path.join(REPORT_DIR, base + ".json")
    txt_path = os.path.join(REPORT_DIR, base + ".txt")

    
    with open(json_path, "w", encoding="utf-8") as jf:
        json.dump(data, jf, indent=2, ensure_ascii=False)

    
    def flatten(d, indent=0):
        lines = []
        pad = "  " * indent
        if isinstance(d, dict):
            for k, v in d.items():
                if isinstance(v, (dict, list)):
                    lines.append(f"{pad}{k}:")
                    lines.extend(flatten(v, indent + 1))
                else:
                    lines.append(f"{pad}{k}: {v}")
        elif isinstance(d, list):
            for i, item in enumerate(d, 1):
                if isinstance(item, (dict, list)):
                    lines.append(f"{pad}-")
                    lines.extend(flatten(item, indent + 1))
                else:
                    lines.append(f"{pad}- {item}")
        else:
            lines.append(f"{pad}{d}")
        return lines

    with open(txt_path, "w", encoding="utf-8") as tf:
        tf.write("\n".join(flatten(data)))

    return os.path.basename(json_path), os.path.basename(txt_path)

@app.route("/reports/<path:filename>")
def download_report(filename):
    return send_from_directory(REPORT_DIR, filename, as_attachment=True)

# ---------- routes ----------
@app.route("/")
def home():
    return render_template("index.html")

# Page 1: Vulnerability Scanner
@app.route("/vuln_scan", methods=["GET", "POST"])
def vuln_scan():
    if request.method == "POST":
        target_ip = request.form.get("target_ip", "").strip()
        file_path = request.form.get("file_path", "").strip()
        url = request.form.get("url", "").strip()

        open_ports = []
        vulns = []

        if target_ip:
            open_ports = scan_ports(target_ip)

        if file_path or url:
            vulns = scan_application(file_path=file_path or None, url=url or None)

        result = {
            "target_ip": target_ip or None,
            "file_path": file_path or None,
            "url": url or None,
            "open_ports": open_ports,
            "vulnerabilities": vulns,
            "timestamp": timestamp()
        }

        jname, tname = save_report("vuln_scan", result)
        flash("Scan completed. Reports saved.", "success")
        return render_template(
            "results.html",
            open_ports=open_ports,
            vulnerabilities=vulns,
            json_report=url_for("download_report", filename=jname),
            txt_report=url_for("download_report", filename=tname),
        )

    return render_template("vuln_scan.html")

# Page 2: Password Tools
@app.route("/password_tools", methods=["GET", "POST"])
def password_tools():
    context = {"strength": None, "enc": None, "dec": None, "error": None, "download": None}
    if request.method == "POST":
        action = request.form.get("action")
        if action == "check_strength":
            pwd = request.form.get("password", "")
            context["strength"] = check_password_strength(pwd)
        elif action == "encrypt":
            msg = request.form.get("text", "")
            passphrase = request.form.get("passphrase", "")
            try:
                context["enc"] = encrypt_text(msg, passphrase)
                data = {
                    "action": "encrypt",
                    "ciphertext": context["enc"],
                    "note": "Keep your passphrase safe to decrypt later.",
                    "timestamp": timestamp(),
                }
                jname, tname = save_report("crypto_encrypt", data)
                context["download"] = {
                    "json": url_for("download_report", filename=jname),
                    "txt": url_for("download_report", filename=tname),
                }
            except Exception as e:
                context["error"] = str(e)
        elif action == "decrypt":
            ct = request.form.get("text", "")
            passphrase = request.form.get("passphrase", "")
            try:
                context["dec"] = decrypt_text(ct, passphrase)
            except Exception as e:
                context["error"] = str(e)
    return render_template("password_tools.html", **context)

# Page 3: Packet Sniffer
@app.route("/sniffer", methods=["GET", "POST"])
def sniffer():
    packets = []
    info = None
    if request.method == "POST":
        count = int(request.form.get("count", "10") or 10)
        timeout = int(request.form.get("timeout", "8") or 8)
        iface = request.form.get("iface") or None
        
        packets = sniff_packets(count=count, timeout=timeout, iface=iface)
        result = {
            "iface": iface,
            "count": count,
            "timeout": timeout,
            "packets": packets,
            "timestamp": timestamp(),
        }
        jname, tname = save_report("sniffer", result)
        info = {
            "json": url_for("download_report", filename=jname),
            "txt": url_for("download_report", filename=tname),
        }
        flash("Sniffing complete. Report saved.", "success")
    return render_template("sniffer.html", packets=packets, report=info)

if __name__ == "__main__":
    
    app.run(debug=True)
