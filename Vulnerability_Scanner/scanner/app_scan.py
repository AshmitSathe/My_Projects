import os
import re
import requests # type: ignore


SECRET_PATTERNS = [
    r"AKIA[0-9A-Z]{16}",                             
    r"(?i)secret[_-]?key\s*=\s*['\"][^'\"]+['\"]",   
    r"(?i)password\s*=\s*['\"][^'\"]+['\"]",         
    r"-----BEGIN (RSA|DSA|EC) PRIVATE KEY-----",     
    r"(?i)api[_-]?key\s*=\s*['\"][^'\"]+['\"]"       
]

def static_analysis(file_path: str):
    vulns = []
    if not os.path.isfile(file_path):
        return ["File not found."]
    try:
        with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
            code = f.read()
        for pat in SECRET_PATTERNS:
            if re.search(pat, code):
                vulns.append(f"Secret-like pattern detected: {pat}")
        if "eval(" in code:
            vulns.append("Use of eval() found — potential code injection risk.")
    except Exception as e:
        vulns.append(f"Static analysis error: {e}")
    return vulns


ERROR_SIGNS = [
    "you have an error in your sql syntax",
    "warning: mysql",
    "syntax error", "unclosed quotation", "odbc", "sqlstate",
    "pg_query", "ora-00933", "ora-00936", "sql server"
]

def dynamic_analysis(url: str, timeout: int = 6):
    vulns = []
    try:
        r = requests.get(url, timeout=timeout, allow_redirects=True)
       
        headers = {k.lower(): v for k, v in r.headers.items()}
        required = {
            "x-frame-options": "Clickjacking protection",
            "content-security-policy": "XSS mitigation",
            "x-content-type-options": "MIME sniffing protection",
            "referrer-policy": "Referrer policy",
            "strict-transport-security": "HSTS (HTTPS)"
        }
        for h, desc in required.items():
            if h not in headers:
                vulns.append(f"Missing header: {h} ({desc})")

        
        probe = "'" 
        test = requests.get(url + probe, timeout=timeout)
        lower = test.text.lower()
        if any(sig in lower for sig in ERROR_SIGNS):
            vulns.append("Possible SQL Injection behavior (error patterns after quote probe).")

        
        xss_payload = "<script>alert(1)</script>"
        test2 = requests.get(url, params={"q": xss_payload}, timeout=timeout)
        if xss_payload.lower() in test2.text.lower():
            vulns.append("Reflected XSS suspected (payload echoed).")

    except Exception as e:
        vulns.append(f"DAST error: {e}")

    return vulns


def binary_analysis(file_path: str):
    if not os.path.isfile(file_path):
        return ["Executable file not found."]
    vulns = []
    if file_path.lower().endswith(".exe"):
        vulns.append("Windows executable uploaded — static PE analysis not implemented (placeholder).")
    else:
        vulns.append("Binary provided (non-.exe) — analysis not implemented.")
    return vulns


def scan_application(file_path: str | None = None, url: str | None = None):
    vulns = []
    if file_path:
        if file_path.lower().endswith(".exe"):
            vulns.extend(binary_analysis(file_path))
        else:
            vulns.extend(static_analysis(file_path))
    if url:
        vulns.extend(dynamic_analysis(url))
    return vulns
