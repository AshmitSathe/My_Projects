import tkinter as tk
from scanner.scan import scan_ports
from scanner.app_scan import scan_application  
import datetime

class VulnerabilityScanner(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Vulnerability Scanner")
        self.geometry("400x400")  
        
        self.create_widgets()

    def create_widgets(self):
        """Create and layout the widgets."""
        self.target_label = tk.Label(self, text="Target IP:")
        self.target_label.pack(pady=5)
        
        self.target_entry = tk.Entry(self)
        self.target_entry.pack(pady=5)

        self.scan_button = tk.Button(self, text="Scan Network", command=self.scan_network)
        self.scan_button.pack(pady=10)

        self.app_label = tk.Label(self, text="Application File Path (for SAST):")
        self.app_label.pack(pady=5)
        
        self.app_entry = tk.Entry(self)
        self.app_entry.pack(pady=5)

        self.url_label = tk.Label(self, text="Application URL (for DAST):")
        self.url_label.pack(pady=5)
        
        self.url_entry = tk.Entry(self)
        self.url_entry.pack(pady=5)

        self.app_scan_button = tk.Button(self, text="Scan Application", command=self.scan_application)
        self.app_scan_button.pack(pady=20)

        self.result_text = tk.Text(self, height=10, width=50)
        self.result_text.pack(pady=10)

    def scan_network(self):
        """Perform the network scan and display results."""
        target_ip = self.target_entry.get()
        
    
        self.result_text.delete(1.0, tk.END)

        if not target_ip:
            self.result_text.insert(tk.END, "Please enter a valid IP address.\n")
            return

        self.result_text.insert(tk.END, f"Scanning {target_ip}...\n")

        self.scan_button.config(state=tk.DISABLED)
        
        try:
            open_ports = scan_ports(target_ip)
            self.display_results(open_ports)
            self.save_report(target_ip, open_ports)
        except Exception as e:
            self.result_text.insert(tk.END, f"Error during scan: {e}\n")
        finally:
        
            self.scan_button.config(state=tk.NORMAL)

    def scan_application(self):
        """Perform application vulnerability scans using SAST and DAST."""
        file_path = self.app_entry.get()
        url = self.url_entry.get()
        
       
        self.result_text.delete(1.0, tk.END)

        vulnerabilities = scan_application(file_path=file_path if file_path else None,
                                            url=url if url else None)

        if vulnerabilities:
            self.result_text.insert(tk.END, "Vulnerabilities Found:\n")
            for vuln in vulnerabilities:
                self.result_text.insert(tk.END, f"{vuln}\n")
        else:
            self.result_text.insert(tk.END, "No vulnerabilities found.\n")

    def display_results(self, open_ports):
        """Display the results of the network scan."""
        if open_ports:
            self.result_text.insert(tk.END, "Open Ports:\n")
            for port in open_ports:
                self.result_text.insert(tk.END, f"{port}\n")
        else:
            self.result_text.insert(tk.END, "No open ports found.\n")
        
        self.result_text.insert(tk.END, "Scan complete.\n")

    def save_report(self, target_ip, open_ports):
        """Save the scan report to a file."""
        report_filename = f"scan_report_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with open(report_filename, "w") as report_file:
            report_file.write(f"Scan Report for {target_ip}\n")
            report_file.write("Open Ports:\n")
            for port in open_ports:
                report_file.write(f"{port}\n")
            report_file.write("Scan complete.\n")
